---
export const prerender = true;

import BlogPost from "~/layouts/BlogPost.astro";
import type { GetStaticPathsResult } from "astro";
import GithubSlugger from "github-slugger";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

export interface Props {
  post: CollectionEntry<"blog" | "garden">;
}

export const getStaticPaths = async (): Promise<GetStaticPathsResult> => {
  const slugger = new GithubSlugger();
  const posts = (await getCollection("blog")).filter((p) => !p.data.draft);
  const garden = (await getCollection("garden")).filter((p) => !p.data.draft);
  let paths = [
    ...posts.map((post) => {
      let date = new Date(post.data.pubDate || "");
      const slug = slugger.slug(post.id.replace(".md", ""), false);
      return {
        params: {
          slug,
          date: date.toLocaleDateString().replaceAll("/", "-"),
        },
        props: { post },
      };
    }),
    ...garden.map((post) => {
      let date = new Date(post.data.pubDate || "");
      const slug = slugger.slug(post.id.replace(".md", ""), false);
      return {
        params: {
          slug,
          date: date.toLocaleDateString().replaceAll("/", "-"),
        },
        props: { post },
      };
    }),
  ];
  return paths;
};

const {
  post: {
    render,
    data: { title, description, tags, pubDate },
  },
} = Astro.props;

const { Content } = await render();
const info = {
  title,
  tags,
  pubDate,
  description: description || "",
};
---

<BlogPost content={info}>
  <Content />
</BlogPost>
