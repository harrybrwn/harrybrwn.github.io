---
export const prerender = true;

import type { GetStaticPathsResult } from "astro";
import BookmarkCard from "~/components/BookmarkCard.astro";
import Base from "~/layouts/Base.astro";
import Nav from "~/components/Nav.astro";
import bookmarks from "~/bookmarks.yml";
import type { Bookmark } from "~/types";

export const getStaticPaths = (): GetStaticPathsResult => {
  const cleanUrl = (url: string) => {
    const u = new URL(url);
    if (u.pathname.length > 0 && u.pathname.endsWith("/"))
      u.pathname = u.pathname.slice(0, u.pathname.length - 1);
    return `${u.host}${u.pathname || "/"}`;
  };

  let tags: Record<string, Bookmark[]> = {};
  let dups = new Set<string>();
  for (const bk of bookmarks.links) {
    // Check for duplicates
    const cleaned = cleanUrl(bk.url);
    if (dups.has(cleaned)) {
      throw new Error(`duplicated bookmark "${JSON.stringify(bk)}"`);
    }
    dups.add(cleaned);

    // Group by tag
    for (const tag of bk.tags) {
      if (!(tag in tags)) {
        tags[tag] = [Object.assign({}, bk)];
      } else {
        tags[tag].push(Object.assign({}, bk));
      }
    }
  }
  return Object.entries(tags).map(([tag, bookmarks]) => ({
    params: { tag },
    props: { bookmarks },
  }));
};

export interface Props {
  bookmarks: Bookmark[];
}

const props = Astro.props;
const title = `Bookmarks | ${Astro.params.tag}`;
const description = `Harry Brown's bookmarks and interesting sites related to ${Astro.params.tag}.`;
---

<Base title={title} description={description}>
  <main>
    <header>
      <Nav
        pages={[
          { href: "/", name: "home" },
          { href: "/about/", name: "about" },
          { href: "/blog/", name: "blog" },
          { href: "/bookmarks/", name: "bookmarks" },
        ]}
      />
    </header>
    <h2>Bookmarks ({Astro.params.tag})</h2>
    <section>
      <div id="bookmarks" class="bookmarks">
        {
          props.bookmarks.map((b) => (
            <BookmarkCard
              href={b.url}
              name={b.name}
              description={b.description}
              tags={b.tags}
            />
          ))
        }
      </div>
    </section>
  </main>
</Base>

<style is:global>
  header {
    font-size: 16px !important;
  }
  main {
    max-width: 1000px !important;
    font-size: 18px !important;
  }

  nav ul {
    list-style: none;
  }

  @media only screen and (min-width: 800px) {
    .bookmarks {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 10px;
      grid-auto-rows: minmax(100px, auto);
    }
  }
  @media only screen and (min-width: 800px) and (max-width: 1200px) {
    .bookmarks {
      grid-template-columns: repeat(2, 1fr);
      gap: 10px;
      grid-auto-rows: minmax(100px, auto);
    }
  }
  @media only screen and (min-width: 1200px) {
    .bookmarks {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 10px;
      grid-auto-rows: minmax(100px, auto);
    }
  }
</style>
