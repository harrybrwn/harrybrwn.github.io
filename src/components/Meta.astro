---
import OpenGraphImage from "./seo/OpenGraphImage.astro";
import OpenGraph, { Props as OpenGraphProps } from "./seo/OpenGraph.astro";

interface TwitterProps {
  username: string;
}

interface MastadonProps {
  username: string;
  instance: string;
}

export interface SEOImage {
  /**
   * URL path to the image.
   */
  url: URL | string;
  /**
   * Description of the image.
   */
  alt: string;
  /**
   * Image MIME type.
   */
  type?: string;
  width?: number;
  height?: number;
}

export interface MetaProps {
  title: string;
  description: string;
  image?: SEOImage;
  author?: string;
  favicon?: string;
  twitter?: TwitterProps;
  mastodon?: MastadonProps;
  robots?: string[];
  onion?: string;
  sitemap?: string;

  og?: OpenGraphProps;
}

export type Props = MetaProps;

const {
  title,
  description,
  author,
  image,
  favicon = "/favicon.ico",
  twitter,
  mastodon,
  robots = ["index", "archive", "follow"],
  onion,
  sitemap,
  og,
} = Object.assign({}, Astro.props);

let iconType = "image/x-icon";
if (favicon.endsWith(".svg")) {
  iconType = "image/svg+xml";
}
if (twitter) {
  if (!twitter.username.startsWith("@")) {
    twitter.username = `@${twitter.username}`;
  }
}

const url = new URL(Astro.url);
const canonicalURL = new URL(Astro.url.pathname, Astro.site);

// Fix open graph meta data
if (og) {
  og.description = og.description || description;
  og.title = og.title || title;
  og.url = og.url || Astro.url;
  if (!og.image) og.image = Object.assign({}, image);
}
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type={iconType} href={favicon} />
<link rel="author" href="/" />
<link rel="index" href="/" />
<link rel="canonical" href={canonicalURL} />
<meta name="generator" content={Astro.generator} />
<meta name="referrer" content="strict-origin-when-cross-origin" />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
{
  description && description.length > 0 && (
    <meta name="description" content={description} />
  )
}
{author && <meta name="author" content={author} />}

<!-- Web Crawlers -->
<meta name="robots" content={robots.join(", ")} />
<meta name="googlebot" content={robots.join(", ")} />

<!-- Open Graph / Facebook -->
{image && <OpenGraphImage {...image} />}
{og && <OpenGraph {...og} />}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
{description && <meta property="twitter:description" content={description} />}
{
  image && (
    <meta
      property="twitter:image"
      content={new URL(image.url, Astro.site).toString()}
    />
  )
}
<meta property="twitter:domain" content={url.hostname} />
{
  twitter && twitter.username && (
    <>
      <meta name="twitter:creator" content={twitter.username} />
      <meta name="twitter:site" content={twitter.username} />
    </>
  )
}

{
  mastodon && (
    <link
      rel="me"
      href={`https://${mastodon.instance}/@${mastodon.username}`}
    />
  )
}

{onion && <meta http-equiv="onion-location" content={onion} />}
{sitemap && <link rel="sitemap" type="application/xml" href={sitemap} />}
