---
import { Theme } from "~/lib/theme";

export interface Props {
  key?: string;
  button?: string;
}
const Dark = Theme.Dark;
const Light = Theme.Light;

let { key = "theme", button = "theme-toggle" } = Astro.props;

if (button && !button.startsWith("#")) {
  button = `#${button}`;
}
---

<script is:inline define:vars={{ Dark, Light, key, button }}>
  const asStr = (t) => (t === Dark ? "dark" : "light");
  const load = () => {
    let res = localStorage.getItem(key);
    if (res === null) {
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? Dark
        : Light;
    }
    return parseInt(res);
  };
  window.theme = load();
  if (document.firstElementChild) {
    document.firstElementChild.setAttribute("data-theme", asStr(theme));
  }

  window.setTheme = (t, toggle) => {
    const c = asStr(t);
    document.firstElementChild?.setAttribute("data-theme", c);
    localStorage.setItem(key, t.toLocaleString());
    toggle.checked = t !== Dark;
    theme = t;
  }

  window.themeToggle = (toggle) => {
    window.setTheme(theme === Dark ? Light : Dark, toggle);
  };

  window.onload = () => {
    const toggle = document.querySelector(button);
    toggle.checked = theme !== Dark;
    toggle.addEventListener("change", () => {
      themeToggle(toggle);
    });
  };
</script>
